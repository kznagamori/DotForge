<Window x:Class="DotForge.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DotForge"
        xmlns:vm="clr-namespace:DotForge.ViewModels"
        mc:Ignorable="d"
        Title="MainWindow" Height="300" Width="600"
        ResizeMode="NoResize">

    <!--
      ▼ 方法1: XAML上で Window.DataContext に直接 ViewModel を指定する方法
         （またはコードビハインドで DataContext を指定してもOK）
    -->
    <Window.DataContext>
        <vm:MainViewModel/>
    </Window.DataContext>

    <DockPanel LastChildFill="True">
        <!-- メニューバー -->
        <Grid DockPanel.Dock="Top" Height="20" Background="White">
            <Grid.ColumnDefinitions>
                <!-- 左メニュー用 -->
                <ColumnDefinition Width="*" />
                <!-- 右メニュー用 -->
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!-- 左側のメニュー -->
            <Menu Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="48" Background="White">
                <MenuItem Header="_ファイル">
                    <!-- 終了は既存のClickイベントをそのまま利用（MVVM的にはCommand化してもOK） -->
                    <MenuItem Header="終了" Click="ExitMenuItem_Click" />
                </MenuItem>
            </Menu>

            <!-- 右側のメニュー -->
            <Menu Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Height="48" Background="White">
                <MenuItem Header="_ヘルプ" />
            </Menu>
        </Grid>

        <!-- ステータスバー -->
        <StatusBar DockPanel.Dock="Bottom">
            <TextBlock Text="ステータスバー: 準備完了" />
        </StatusBar>

        <!-- コンテンツエリア -->
        <Grid Margin="10">
            <!-- 行定義 -->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <!-- 列定義 -->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!-- 1行目: テンプレート (Label + ListBox) -->
            <Label Grid.Row="0" Grid.Column="0"
                   Content="テンプレート："
                   Margin="4" VerticalAlignment="Center"
                   IsEnabled="{Binding IsTemplateRowEnabled}"/>
            <ComboBox Grid.Row="0" Grid.Column="1"
                     Height="22"
                     Margin="4"
                     ItemsSource="{Binding Templates}"
                     SelectedItem="{Binding SelectedTemplate, Mode=TwoWay}"
                     IsEnabled="{Binding IsTemplateRowEnabled}"/>

            <!-- 2行目: プロジェクトファイル (Label + TextBox + 開くボタン) -->
            <Label Grid.Row="1" Grid.Column="0"
                   Content="プロジェクトファイル："
                   Margin="4" VerticalAlignment="Center"
                   IsEnabled="{Binding IsProjectFileRowEnabled}"/>
            <TextBox Grid.Row="1" Grid.Column="1"
                     Height="22"
                     Margin="4"
                     Text="{Binding ProjectFilePath, Mode=TwoWay}"
                     IsEnabled="{Binding IsProjectFileRowEnabled}"/>
            <Button Grid.Row="1" Grid.Column="2"
                    Content="開く"
                    Padding="10,0" Margin="4"
                    Command="{Binding OpenProjectFileCommand}"
                    IsEnabled="{Binding IsProjectFileRowEnabled}"/>

            <!-- 3行目: プロジェクト名 (Label + TextBox) -->
            <Label Grid.Row="2" Grid.Column="0"
                   Content="プロジェクト名："
                   Margin="4" VerticalAlignment="Center"
                   IsEnabled="{Binding IsProjectNameRowEnabled}"/>
            <TextBox Grid.Row="2" Grid.Column="1"
                     Height="22"
                     Margin="4"
                     Text="{Binding ProjectName, Mode=TwoWay}"
                     IsEnabled="{Binding IsProjectNameRowEnabled}"/>

            <!-- 4行目: クラス名 (Label + TextBox) -->
            <Label Grid.Row="3" Grid.Column="0"
                   Content="クラス名："
                   Margin="4" VerticalAlignment="Center"
                   IsEnabled="{Binding IsClassNameRowEnabled}"/>
            <TextBox Grid.Row="3" Grid.Column="1"
                     Height="22"
                     Margin="4"
                     Text="{Binding ClassName, Mode=TwoWay}"
                     IsEnabled="{Binding IsClassNameRowEnabled}"/>

            <!-- 5行目: 出力先ディレクトリ (Label + TextBox + 開くボタン) -->
            <Label Grid.Row="4" Grid.Column="0"
                   Content="出力先ディレクトリ："
                   Margin="4" VerticalAlignment="Center"
                   IsEnabled="{Binding IsOutputDirRowEnabled}"/>
            <TextBox Grid.Row="4" Grid.Column="1"
                     Height="22"
                     Margin="4"
                     Text="{Binding OutputDirectory, Mode=TwoWay}"
                     IsEnabled="{Binding IsOutputDirRowEnabled}"/>
            <Button Grid.Row="4" Grid.Column="2"
                    Content="開く"
                    Padding="10,0" Margin="4"
                    Command="{Binding OpenOutputDirCommand}"
                    IsEnabled="{Binding IsOutputDirRowEnabled}"/>

            <!-- 6行目: 出力ボタン（右寄せ） -->
            <Button Grid.Row="5" Grid.Column="2"
                    Content="出力"
                    HorizontalAlignment="Right"
                    Padding="20,5"
                    Command="{Binding GenerateOutputCommand}"/>
        </Grid>
    </DockPanel>
</Window>
